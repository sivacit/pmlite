// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id               String         @id @default(cuid())
  name             String
  password         String?
  salt             String?
  phone            String?        @unique
  email            String         @unique
  avatar           String?
  isSystem         Boolean?       @map("is_system")
  isAdmin          Boolean?       @map("is_admin")
  notifyMeta       String?        @map("notify_meta")
  lastSignTime     DateTime?      @map("last_sign_time")
  deactivatedTime  DateTime?      @map("deactivated_time")
  createdTime      DateTime       @default(now()) @map("created_time")
  deletedTime      DateTime?      @map("deleted_time")
  lastModifiedTime DateTime?      @updatedAt @map("last_modified_time")
  collaborators    Collaborator[]
  Task             Task[]
  accounts         Account[]

  @@map("users")
}

model Account {
  id               String    @id @default(cuid())
  userId           String    @map("user_id")
  type             String
  provider         String
  providerId       String    @map("provider_id")
  createdTime      DateTime  @default(now()) @map("created_time")

  user             User      @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerId])
  @@map("account")
}

model Collaborator {
  id               String    @id @default(cuid())
  roleName         String    @map("role_name")
  resourceType     String    @map("resource_type")
  resourceId       String    @map("resource_id")
  userId           String    @map("user_id")
  createdBy        String    @map("created_by")
  createdTime      DateTime  @default(now()) @map("created_time")
  lastModifiedTime DateTime? @updatedAt @map("last_modified_time")
  lastModifiedBy   String?   @map("last_modified_by")
  user             User      @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([resourceType, resourceId, userId])
  @@map("collaborator")
}

model Project {
  id               String    @id @default(cuid())
  name             String
  credit           Int?
  deletedTime      DateTime? @map("deleted_time")
  createdTime      DateTime  @default(now()) @map("created_time")
  createdBy        String    @map("created_by")
  lastModifiedBy   String?   @map("last_modified_by")
  lastModifiedTime DateTime? @updatedAt @map("last_modified_time")

  tasks Task[]

  @@map("project")
}

model Task {
  id        String    @id @default(cuid())
  title     String
  status    String
  deadline  DateTime?
  projectId String
  project   Project?   @relation(fields: [projectId], references: [id])
  userId    String?
  user      User?      @relation(fields: [userId], references: [id]) 
  @@map("task")
}
